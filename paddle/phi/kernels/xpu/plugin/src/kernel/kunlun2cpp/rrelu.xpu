#include "xpu/kernel/cluster_partition.h"
#include "xpu/kernel/cluster_primitive.h"

namespace xpu2 {
  namespace plugin {
template <typename T>
__global__ void rrelu(const T* x, T* y, int len, float lower, float upper) {
  int cid = core_id();
  int ncores = core_num();
  if (cid > ncores) return;

  int thread_id = cid * cluster_num() + cluster_id();
  int nthreads = ncores * cluster_num();

  const int buf_len = 128;
  __simd__ float local_x[buf_len];
  __simd__ float local_y[buf_len];

  float mid_val = (lower + upper) / 2.0;

  int start = -1;
  int end = -1;
  partition(thread_id, nthreads, len, 16, &start, &end);
  for (int i = start; i < end; i += buf_len) {
    int read_len = min(buf_len, end - i);
    GM2LM(x + i, local_x, read_len * sizeof(T));
    primitive_cast<T, float>((T*)local_x, local_x, read_len);
    for (int j = 0; j < read_len; j++) {
      if (local_x[j] < 0.0f) {
        local_y[j] = mid_val * local_x[j];
      } else {
        local_y[j] = local_x[j];
      }
    }
    primitive_cast<float, T>(local_y, (T*)local_y, read_len);
    LM2GM(local_y, y + i, read_len * sizeof(T));
  }
}

#define _XPU_DEF__RRELU_(DTYPE)                            \
  template __global__ void rrelu<DTYPE>(const DTYPE* x,    \
                                        DTYPE* y,          \
                                        int len,           \
                                        float lower, \
                                        float upper);
_XPU_DEF__RRELU_(float);
_XPU_DEF__RRELU_(float16);

}  // namespace plugin
}  // namespace xpu2
